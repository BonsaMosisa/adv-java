package javafxapplication1;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

public class JavaFXApplication1 extends Application {

    private TextField display; // Text field to display the input and result
    private String currentInput = ""; // Stores the current input
    private double result = 0; // Stores the result of calculations
    private String operator = ""; // Stores the current operator

    @Override
    public void start(Stage primaryStage) {
        // Create the display text field
        display = new TextField();
        display.setEditable(false);
        display.setAlignment(Pos.CENTER_RIGHT);
        display.setStyle("-fx-font-size: 20;");

        // Create buttons for digits and operations
        Button[] digitButtons = new Button[10];
        for (int i = 0; i < 10; i++) {
            digitButtons[i] = new Button(Integer.toString(i));
            digitButtons[i].setStyle("-fx-font-size: 18;");
            int finalI = i;
            digitButtons[i].setOnAction(e -> appendDigit(finalI));
        }

        Button addButton = createOperatorButton("+");
        Button subtractButton = createOperatorButton("-");
        Button multiplyButton = createOperatorButton("*");
        Button divideButton = createOperatorButton("/");
        Button equalsButton = createOperatorButton("=");
        Button clearButton = new Button("C");
        clearButton.setStyle("-fx-font-size: 18;");
        clearButton.setOnAction(e -> clear());

        // Create a grid pane to arrange the buttons
        GridPane gridPane = new GridPane();
        gridPane.setPadding(new Insets(10));
        gridPane.setHgap(10);
        gridPane.setVgap(10);

        // Add the display to the grid
        gridPane.add(display, 0, 0, 4, 1);

        // Add digit buttons to the grid
        gridPane.add(digitButtons[7], 0, 1);
        gridPane.add(digitButtons[8], 1, 1);
        gridPane.add(digitButtons[9], 2, 1);
        gridPane.add(digitButtons[4], 0, 2);
        gridPane.add(digitButtons[5], 1, 2);
        gridPane.add(digitButtons[6], 2, 2);
        gridPane.add(digitButtons[1], 0, 3);
        gridPane.add(digitButtons[2], 1, 3);
        gridPane.add(digitButtons[3], 2, 3);
        gridPane.add(digitButtons[0], 1, 4);

        // Add operation buttons to the grid
        gridPane.add(addButton, 3, 1);
        gridPane.add(subtractButton, 3, 2);
        gridPane.add(multiplyButton, 3, 3);
        gridPane.add(divideButton, 3, 4);
        gridPane.add(equalsButton, 2, 4);
        gridPane.add(clearButton, 0, 4);

        // Create the scene and set it to the stage
        Scene scene = new Scene(gridPane, 300, 400);
        primaryStage.setTitle("Simple Calculator");
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Helper method to create operator buttons
    private Button createOperatorButton(String text) {
        Button button = new Button(text);
        button.setStyle("-fx-font-size: 18;");
        button.setOnAction(e -> handleOperator(text));
        return button;
    }

    // Append a digit to the current input
    private void appendDigit(int digit) {
        currentInput += digit;
        display.setText(currentInput);
    }

    // Handle operator button clicks
    private void handleOperator(String op) {
        if (!currentInput.isEmpty()) {
            double inputNumber = Double.parseDouble(currentInput);
            switch (operator) {
                case "+":
                    result += inputNumber;
                    break;
                case "-":
                    result -= inputNumber;
                    break;
                case "*":
                    result *= inputNumber;
                    break;
                case "/":
                    result /= inputNumber;
                    break;
                default:
                    result = inputNumber;
                    break;
            }
            display.setText(String.valueOf(result));
            currentInput = "";
        }
        operator = op;
    }

    // Clear the calculator
    private void clear() {
        currentInput = "";
        result = 0;
        operator = "";
        display.clear();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
